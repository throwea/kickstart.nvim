Neovim Reference:
  Lua is a lightweight scripting language that I can use to configure my neovim
  Language Notes:
    - Names/Identifiers: any string of letters, digits and underscores not starting with a digit. There are a subset of keywords excluded from this set of all names. This is the same in any other language. Don't set a variable name as "return" 
    -


  Using Lua -> Language Documentation https://neovim.io/doc/user/luaref.html#luaref
    - Run Lua from command line example -> :lua print("Hello!")
    - To run a Lua script in an external file use the source command. Example -> :source ~/programs/baz/myluascript.lua
    - The init.lua file should always be placed in the ~/.config/nvim/ folder
      - You can also create lua modules by placing them in the 'runtimepath' ~/.config/nvim/lua/ directory then you can use the // require("<myluamodule>")// 
      - If you want to load another init.lua file nested in the lua directory you can just call require on the directory name and it will autoload the init.lua file. This is good if you need to override some key binds for a specific project
      - Lua modules are usually cached. So if you make changes to a lua module you will need to overwrite the cache with // package.loaded['myluamodule'] = nil; require('myluamodule');// 
    - To run arbitrary Vim command from Lua pass vim command as string like this -> //:lua vim.cmd("colorscheme habamax")//

  Built-In Functions -> https://neovim.io/doc/user/builtin.html#builtin-functions:
    - to use builtin functions you can test them using -> //:<built-in func>// in the command line

  Function List -> https://neovim.io/doc/user/usr_41.html#function-list

  Variables -> https://neovim.io/doc/user/lua-guide.html#_variables
    - vim.g allows for the setting of global variables. We already saw this in our init.lua
  
  Options:
    - set options with vim.opt.<option> = <some_value>

  **Mappings -> https://neovim.io/doc/user/lua-guide.html#_mappings:
    - Keybinds can be assigned to lua functions. I made an example of this in my init.lua file already
    - IMPORTANT: when a keymap is made the remap option is typically set to true by default. This means that remaps are recursive. If you set noremap then keymaps will not recurse down
    - if a mapping has the silent=true option it will not be echoed to the command line
    - <CR>: carriage return a.k.a. Enter button
    - Examples:
      - vim.keymap.set('n', '<Leader>ex1', '<cmd>echo "Example 1"<cr>') // Translation: When in normal mode ('n') if you hit Leader+e+x+1
      - vim.keymap.set('n', '<Leader>ex3', vim.treesitter.start) //Translation: When i:n normal mode ('n') hit leader + ex3
      - vim.keymap.set('n', '<Leader>ex4', function() print('Example 4') end)
      - <cmd>echo "Example 1"<cr>

  Lazy: is a plugin package manager
  Mason: ? -> For LSPs...
  Keyword Directories:
    - .config/nvim/ftdetect
      - "ftdetect" can
      - to ignore inspected certain file types :let g:ft_ignore_pat = '\.\(Z\|gz\|bz2\|zip\|tgz\)$'
      - To add a new filetype that is not detected you can use the vim.filetype.add() in init.lua to include it in nvim file detection
      - addition
  Buffers:
    - A buffer is the in-memory text of a file
    - a window is a viewport into a buffer
    - tab page is a collection of windows. Page -> window -> buffer
    - Our edits through neovim update the buffer which stores the text of the file we are modifying
    - Three states of a buffer:
      - active: the buffer is active in the window. Basically, youre editing a file and buffer is being modified
      - inactive: buffer doesn't contain any text and is not displayed
      - hidden: there is a file loaded onto a buffer but you can't see it. Same as active buffer but simply hidden from the user
  Mac Setup:
  - download iterm2 $brew install --cask iterm2
  - set have_nerd_font = true
  - set iterm2 as default terminal click on iterm2-> set iterm as default
  - download nerd font so neo tree web dev icons work $ curl -sS https://webi.sh/nerdfont | sh
  - go to iterm2 -> preferences -> profiles -> text -> click use a different font for non-ascii text and put "nerd font"
  
  Tips:
    - Directory Traversing with netrw
      - How Traverse Directories Using Neovim: $ nvim <directory name> 
      - Create a new directory with "d" while in vim file explorer
      - Create a new file with "%" while in vim file explorer

    - Helpful keybinds
      - Autocomplete -> Insert Mode
        - <C-n> for next option 
        - <C-p> for previous option
        - <C-y> to accept current option
      - Switching Between Tabs
        - <C-h> switch to left pane on the screen
        - <C-l> switch to the right pane
        - <C-j> switch to below pane
        - <C-k> switch to above pane
      - Surround
        - saiw) - [S]urround [A]dd [I]nner [W]ord [)]Paren
        - sd'   - [S]urround [D]elete [']quotes
        - sr)'  - [S]urround [R]eplace [)] [']

        - ysiw) Surround word with paren 
        - yss' surround entire line with single quote
        - ysip) Surround paragraph with parentheses
        - cs'" Change the surrounding single quote to double quote

      - Simple keybinds:
        - "O" inserts a line above and places you into insert mode similar to "o"
      - LSP
        - <leader>ca to see recommendations from the LSP type 
        - gd same as vscode
        - gI for going to implementation
      - Searching
        - <leader>s. for recent files
        - <C-p> for files in directory where I did nvim
        - <leader>sg for grepping for words

    - Help
      - When making keymaps first see if you can run the command using ":<CommandNameHere>"
      - If you can't find the command name use ":help <plugin> name and try to search from there", this was how I get the TodoTelescope working

    - Adding Plugins
      - go the plugins folder and add a file per plugin. Follow this documentation for lazyvim: https://www.lazyvim.org/configuration/plugins

    - Transparency
      - on WSL click the dropdown arrow at the top and then click the open settings.json file . Then add inside profiles.defaults the opacity = [1,100] and useAcrylic=false
    
    - TMUX:
      - Start new TMUX session: tmux new -s session_name
      - stop all tmux sessions: tmux kill-server
      - there is a tmux plugin for nvim
  
    - LSP:
      - :LsgLog let's you see the logs from your language server. This might be helpful for debugging
      - :LspInfo shows what LSPs are connected to the buffer

    - ZSH
      - brew install zsh-vi-mode
      - source $(brew --prefix)/opt/zsh-vi-mode/share/zsh-vi-mode/zsh-vi-mode.plugin.zsh

    - Helpful OMZSH Plugins:
      - https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kubzsh-vi-modeectl/kubectl.plugin.zsh

    - Debugging:
      - Debug golang (standalone) golang test by hitting <F5> and hitting choosing delve (go.mod) and the break point will be hit

    - Language Specific Notes:
      - Python:
        - For dealing with virtual environments it should be enough to activate the environment before starting vim and the LSP will work

    - Git:
      - Hunk: a hunk is a subset of changed lines dispersed through out the change tree
      - To view the search history of a file: lazygit -> <c-s> -> enter file name 
